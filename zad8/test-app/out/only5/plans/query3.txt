Plan hash value: 3851442093
 
----------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                                | Name                          | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                         |                               |     1 |  2200 |       |  6043   (2)| 00:00:01 |
|   1 |  NESTED LOOPS                            |                               |     1 |  2200 |       |  6043   (2)| 00:00:01 |
|   2 |   NESTED LOOPS                           |                               |     1 |  2193 |       |  6042   (2)| 00:00:01 |
|   3 |    NESTED LOOPS                          |                               |     1 |  2182 |       |  6041   (2)| 00:00:01 |
|   4 |     NESTED LOOPS                         |                               |     1 |  2159 |       |  6040   (2)| 00:00:01 |
|   5 |      NESTED LOOPS                        |                               |     1 |  2133 |       |  6037   (2)| 00:00:01 |
|*  6 |       HASH JOIN                          |                               |    35 | 71785 |       |  5943   (2)| 00:00:01 |
|*  7 |        HASH JOIN                         |                               |  1063 | 38268 |       |  3714   (3)| 00:00:01 |
|   8 |         VIEW                             |                               |  1063 | 13819 |       |  3067   (3)| 00:00:01 |
|*  9 |          FILTER                          |                               |       |       |       |            |          |
|  10 |           HASH GROUP BY                  |                               |  1063 | 28701 |       |  3067   (3)| 00:00:01 |
|* 11 |            FILTER                        |                               |       |       |       |            |          |
|* 12 |             HASH JOIN                    |                               |   659K|    16M|  7856K|  3028   (2)| 00:00:01 |
|  13 |              INDEX FAST FULL SCAN        | SENTENCE_FK_PRISONER_IDX      |   473K|  2310K|       |   291   (2)| 00:00:01 |
|* 14 |              HASH JOIN                   |                               |   422K|  9069K|  7016K|  1665   (2)| 00:00:01 |
|  15 |               INDEX FAST FULL SCAN       | REPRIMAND_FK_PRISONER_IDX     |   422K|  2061K|       |   260   (2)| 00:00:01 |
|  16 |               TABLE ACCESS FULL          | PRISONER                      |   299K|  4980K|       |   645   (1)| 00:00:01 |
|  17 |         TABLE ACCESS FULL                | PRISONER                      |   299K|  6737K|       |   645   (1)| 00:00:01 |
|* 18 |        VIEW                              |                               |  9870 |    18M|       |  2228   (2)| 00:00:01 |
|  19 |         SORT GROUP BY                    |                               |  9870 |   751K|   872K|  2228   (2)| 00:00:01 |
|* 20 |          FILTER                          |                               |       |       |       |            |          |
|* 21 |           HASH JOIN                      |                               |  9870 |   751K|       |  2046   (2)| 00:00:01 |
|* 22 |            TABLE ACCESS FULL             | SENTENCE                      |  9870 |   587K|       |  1399   (3)| 00:00:01 |
|  23 |            TABLE ACCESS FULL             | PRISONER                      |   299K|  4980K|       |   645   (1)| 00:00:01 |
|* 24 |       TABLE ACCESS BY INDEX ROWID BATCHED| REPRIMAND                     |     1 |    82 |       |     3   (0)| 00:00:01 |
|* 25 |        INDEX RANGE SCAN                  | REPRIMAND_FK_PRISONER_IDX     |     2 |       |       |     2   (0)| 00:00:01 |
|* 26 |      TABLE ACCESS BY INDEX ROWID BATCHED | ACCOMMODATION                 |     1 |    26 |       |     3   (0)| 00:00:01 |
|* 27 |       INDEX RANGE SCAN                   | ACCOMMODATION_FK_PRISONER_IDX |     5 |       |       |     2   (0)| 00:00:01 |
|  28 |     TABLE ACCESS BY INDEX ROWID          | GUARD                         |     1 |    23 |       |     1   (0)| 00:00:01 |
|* 29 |      INDEX UNIQUE SCAN                   | SYS_C008868                   |     1 |       |       |     0   (0)| 00:00:01 |
|* 30 |    TABLE ACCESS BY INDEX ROWID           | CELL                          |     1 |    11 |       |     1   (0)| 00:00:01 |
|* 31 |     INDEX UNIQUE SCAN                    | SYS_C008883                   |     1 |       |       |     0   (0)| 00:00:01 |
|* 32 |   TABLE ACCESS BY INDEX ROWID            | PRISON_BLOCK                  |     1 |     7 |       |     1   (0)| 00:00:01 |
|* 33 |    INDEX UNIQUE SCAN                     | SYS_C008855                   |     1 |       |       |     0   (0)| 00:00:01 |
----------------------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   6 - access("P"."ID"="PS"."ID")
   7 - access("P"."ID"="PC"."ID")
   9 - filter((:SENTENCE_COUNT IS NULL OR COUNT(*)=TO_NUMBER(:SENTENCE_COUNT)) AND (:REPRIMAND_COUNT IS NULL OR 
              COUNT(*)=TO_NUMBER(:REPRIMAND_COUNT)))
  11 - filter(:END_DATE>=:START_DATE)
  12 - access("P"."ID"="S"."FK_PRISONER")
  14 - access("P"."ID"="R"."FK_PRISONER")
  18 - filter(:CRIME IS NULL OR INSTR("PS"."CRIME",:CRIME)>0)
  20 - filter(:END_DATE>=:START_DATE)
  21 - access("P"."ID"="S"."FK_PRISONER")
  22 - filter(TO_CHAR(INTERNAL_FUNCTION("S"."START_DATE"),'YYYY-MM-DD')<=:START_DATE AND ("S"."REAL_END_DATE" IS NULL OR 
              TO_CHAR(INTERNAL_FUNCTION("S"."REAL_END_DATE"),'YYYY-MM-DD')>=:END_DATE))
  24 - filter((:EVENT_TYPE IS NULL OR INSTR("R"."REASON",:EVENT_TYPE)>0) AND 
              TO_CHAR(INTERNAL_FUNCTION("R"."ISSUE_DATE"),'YYYY-MM-DD')>=:START_DATE AND 
              TO_CHAR(INTERNAL_FUNCTION("R"."ISSUE_DATE"),'YYYY-MM-DD')<=:END_DATE)
  25 - access("R"."FK_PRISONER"="P"."ID")
  26 - filter(TO_CHAR(INTERNAL_FUNCTION("A"."START_DATE"),'YYYY-MM-DD')<=:START_DATE AND ("A"."END_DATE" IS NULL OR 
              TO_CHAR(INTERNAL_FUNCTION("A"."END_DATE"),'YYYY-MM-DD')>=:END_DATE))
  27 - access("P"."ID"="A"."FK_PRISONER")
  29 - access("R"."FK_GUARD"="G"."ID")
  30 - filter("C"."IS_SOLITARY"=TO_NUMBER(:IS_IN_SOLITARY) OR :IS_IN_SOLITARY IS NULL)
  31 - access("C"."ID"="A"."FK_CELL")
  32 - filter(:BLOCK_NUMBER IS NULL OR "PB"."BLOCK_NUMBER"=:BLOCK_NUMBER)
  33 - access("PB"."ID"="C"."FK_BLOCK")
 
Note
-----
   - this is an adaptive plan
