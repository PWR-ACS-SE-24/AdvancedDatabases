Plan hash value: 2625627845
 
-----------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                                     | Name                            | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                              |                                 |     1 |  2204 |       |  5272   (1)| 00:00:01 |
|   1 |  NESTED LOOPS                                 |                                 |     1 |  2204 |       |  5272   (1)| 00:00:01 |
|   2 |   NESTED LOOPS                                |                                 |     1 |  2197 |       |  5271   (1)| 00:00:01 |
|   3 |    NESTED LOOPS                               |                                 |     1 |  2186 |       |  5270   (1)| 00:00:01 |
|   4 |     NESTED LOOPS                              |                                 |     1 |  2163 |       |  5269   (1)| 00:00:01 |
|   5 |      NESTED LOOPS                             |                                 |     1 |  2133 |       |  5266   (1)| 00:00:01 |
|*  6 |       HASH JOIN                               |                                 |    31 | 63581 |       |  5183   (1)| 00:00:01 |
|*  7 |        HASH JOIN                              |                                 |   937 | 33732 |       |  3236   (1)| 00:00:01 |
|   8 |         VIEW                                  |                                 |   937 | 12181 |       |  2667   (2)| 00:00:01 |
|*  9 |          FILTER                               |                                 |       |       |       |            |          |
|  10 |           HASH GROUP BY                       |                                 |   937 | 25299 |       |  2667   (2)| 00:00:01 |
|* 11 |            FILTER                             |                                 |       |       |       |            |          |
|* 12 |             HASH JOIN                         |                                 |   579K|    14M|  6920K|  2653   (1)| 00:00:01 |
|  13 |              INDEX FAST FULL SCAN             | SENTENCE_FK_PRISONER_IDX        |   416K|  2035K|       |   255   (1)| 00:00:01 |
|* 14 |              HASH JOIN                        |                                 |   371K|  7987K|  6176K|  1460   (1)| 00:00:01 |
|  15 |               INDEX FAST FULL SCAN            | REPRIMAND_FK_PRISONER_IDX       |   371K|  1815K|       |   227   (1)| 00:00:01 |
|  16 |               TABLE ACCESS FULL               | PRISONER                        |   264K|  4392K|       |   568   (1)| 00:00:01 |
|  17 |         TABLE ACCESS FULL                     | PRISONER                        |   264K|  5942K|       |   568   (1)| 00:00:01 |
|* 18 |        VIEW                                   |                                 |  8717 |    16M|       |  1947   (1)| 00:00:01 |
|  19 |         SORT GROUP BY                         |                                 |  8717 |   715K|   808K|  1947   (1)| 00:00:01 |
|* 20 |          FILTER                               |                                 |       |       |       |            |          |
|* 21 |           HASH JOIN                           |                                 |  8717 |   715K|       |  1774   (1)| 00:00:01 |
|* 22 |            TABLE ACCESS BY INDEX ROWID BATCHED| SENTENCE                        |  8717 |   570K|       |  1206   (1)| 00:00:01 |
|* 23 |             INDEX RANGE SCAN                  | SENTENCE_START_DATE_TO_CHAR_IDX |  3751 |       |       |    14   (0)| 00:00:01 |
|  24 |            TABLE ACCESS FULL                  | PRISONER                        |   264K|  4392K|       |   568   (1)| 00:00:01 |
|* 25 |       TABLE ACCESS BY INDEX ROWID BATCHED     | REPRIMAND                       |     1 |    82 |       |     3   (0)| 00:00:01 |
|* 26 |        INDEX RANGE SCAN                       | REPRIMAND_FK_PRISONER_IDX       |     2 |       |       |     2   (0)| 00:00:01 |
|* 27 |      TABLE ACCESS BY INDEX ROWID BATCHED      | ACCOMMODATION                   |     1 |    30 |       |     3   (0)| 00:00:01 |
|* 28 |       INDEX RANGE SCAN                        | ACCOMMODATION_FK_PRISONER_IDX   |     5 |       |       |     2   (0)| 00:00:01 |
|  29 |     TABLE ACCESS BY INDEX ROWID               | GUARD                           |     1 |    23 |       |     1   (0)| 00:00:01 |
|* 30 |      INDEX UNIQUE SCAN                        | SYS_C008254                     |     1 |       |       |     0   (0)| 00:00:01 |
|* 31 |    TABLE ACCESS BY INDEX ROWID                | CELL                            |     1 |    11 |       |     1   (0)| 00:00:01 |
|* 32 |     INDEX UNIQUE SCAN                         | SYS_C008269                     |     1 |       |       |     0   (0)| 00:00:01 |
|* 33 |   TABLE ACCESS BY INDEX ROWID                 | PRISON_BLOCK                    |     1 |     7 |       |     1   (0)| 00:00:01 |
|* 34 |    INDEX UNIQUE SCAN                          | SYS_C008241                     |     1 |       |       |     0   (0)| 00:00:01 |
-----------------------------------------------------------------------------------------------------------------------------------------
 
Predicate Information (identified by operation id):
---------------------------------------------------
 
   6 - access("P"."ID"="PS"."ID")
   7 - access("P"."ID"="PC"."ID")
   9 - filter((:SENTENCE_COUNT IS NULL OR COUNT(*)=TO_NUMBER(:SENTENCE_COUNT)) AND (:REPRIMAND_COUNT IS NULL OR 
              COUNT(*)=TO_NUMBER(:REPRIMAND_COUNT)))
  11 - filter(:END_DATE>=:START_DATE)
  12 - access("P"."ID"="S"."FK_PRISONER")
  14 - access("P"."ID"="R"."FK_PRISONER")
  18 - filter(:CRIME IS NULL OR INSTR("PS"."CRIME",:CRIME)>0)
  20 - filter(:END_DATE>=:START_DATE)
  21 - access("P"."ID"="S"."FK_PRISONER")
  22 - filter("S"."REAL_END_DATE" IS NULL OR TO_CHAR(INTERNAL_FUNCTION("REAL_END_DATE"),'YYYY-MM-DD')>=:END_DATE)
  23 - access(TO_CHAR(INTERNAL_FUNCTION("START_DATE"),'YYYY-MM-DD')<=:START_DATE)
  25 - filter((:EVENT_TYPE IS NULL OR INSTR("R"."REASON",:EVENT_TYPE)>0) AND 
              TO_CHAR(INTERNAL_FUNCTION("ISSUE_DATE"),'YYYY-MM-DD')>=:START_DATE AND 
              TO_CHAR(INTERNAL_FUNCTION("ISSUE_DATE"),'YYYY-MM-DD')<=:END_DATE)
  26 - access("R"."FK_PRISONER"="P"."ID")
  27 - filter(TO_CHAR(INTERNAL_FUNCTION("START_DATE"),'YYYY-MM-DD')<=:START_DATE AND ("A"."END_DATE" IS NULL OR 
              TO_CHAR(INTERNAL_FUNCTION("END_DATE"),'YYYY-MM-DD')>=:END_DATE))
  28 - access("P"."ID"="A"."FK_PRISONER")
  30 - access("R"."FK_GUARD"="G"."ID")
  31 - filter("C"."IS_SOLITARY"=TO_NUMBER(:IS_IN_SOLITARY) OR :IS_IN_SOLITARY IS NULL)
  32 - access("C"."ID"="A"."FK_CELL")
  33 - filter(:BLOCK_NUMBER IS NULL OR "PB"."BLOCK_NUMBER"=:BLOCK_NUMBER)
  34 - access("PB"."ID"="C"."FK_BLOCK")
 
Note
-----
   - this is an adaptive plan
